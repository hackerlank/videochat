load("conf.js");
load("netservices.asc");

function mytrace(s){
	trace(s);
}

application.getUserInfoByUid = function(uid){
	if (!this.users[uid]) {return null};
	var ret = {};
	for (var i in this.users[uid]['data']) {
		ret[i] = this.users[uid]['data'][i];
	};
	ret.client = this.users[uid];
	return ret;
}

application.onAppStart = function(){
	this.users = {};
	this.so = SharedObject.get("so");
	NetServices.setDefaultGatewayUrl(ServerURL);

	var service = application.getService("ChatService", this);
	this.getRoomInfo_Result = function(resp) {
		if (resp.errno) {
			mytrace('getRoomInfo error:' + resp.errno + '|' + resp.msg);
			application.shutdown();
			return;
		}
		mid = resp.data.mid;
		mytrace('room mid:' + mid);
	}
	this.getRoomInfo_Status = function(result) {
		mytrace('getRoomInfo_Status level:' + result.level + ' description:' + result.description);
		application.shutdown();
	}
	service.getRoomInfo(application.name.substring(application.name.indexOf('_') + 1));
}

application.onAppStop = function(info) {
	mytrace('app stop');
}

application.onPublish = function(client, stream){
	mytrace('pub mid:' + client.data.uid);
}

application.onUnpublish = function(client, stream){
	mytrace('unpub: ' + stream.name);
	this.so.setProperty('video', null);
}

application.onStatus = function(info){
	mytrace('code: ' + info.code + ' level: ' + info.level + ' description:' + info.description);
}

application.getService = function(serviceName, obj){
	var conn = NetServices.createGatewayConnection();
	return conn.getService(serviceName, obj);
}

application.onConnect = function(client, sid, uid, rid){
	mytrace('onConnect session:' + sid + ' uid:' + uid + " rid:" + rid);
	// 重复登录问题
	if(this.users[uid]){
		mytrace('replogin uid:' + uid);
		application.disconnect(this.users[uid]);
	}
	var service = application.getService("ChatService", this);
	var userInfo;
	// 获取用户身份
	this.getUserInfo_Result = function(resp){
		if(resp.errno){
			// 无效用户
			mytrace('getUserInfo error:' + resp.errno + '|' + resp.msg);
			//会调用onDisconnect
			application.rejectConnection(client, {errno : 103});
			return;
		}
		else{
			userInfo = resp.data;
			client.data = {
				sid : sid, uid : userInfo.id, nickname : userInfo.nickname, sex : userInfo.sex, role : userInfo.role, headPic : userInfo.headPic, logoutMsg : userInfo.logoutMsg, ban : userInfo.ban
			};
			mytrace("uid:" + userInfo.id + " nickname:" + userInfo.nickname + " sex:" + userInfo.sex + " role:" + userInfo.role + " headPic:" + userInfo.headPic + " logoutMsg:" + userInfo.logoutMsg);
			// 普通用户
			if(userInfo.role == 1){
				// 检查人数限制
				if(application.clients.length >= userInfo.roomMaxUser){
					mytrace('maxuser');
					application.rejectConnection(client,  {errno : 101});
					return;
				}
				else{
					if(!userInfo.allowIn) {//禁止进入
						mytrace('uid:' + userInfo.id + ' not allow');
						application.rejectConnection(client, {errno : 102});
						return;					
					}
				}
			}
			else{ // 主持人和管理员
				mytrace('admin onLogin uid:' + userInfo.id);
			}
		}
		application.doLoginOK(client, userInfo);
	}
	this.getUserInfo_Status = function(info){
		mytrace('getUserInfo_Status level:' + info.level + ' description:' + info.description);
		application.rejectConnection(client, {errno : 104, msg : 'getUserInfo_Status level:' + info.level + ' description:' + info.description});
	}
	service.getUserInfo(sid, uid, rid);
}

application.doLoginOK = function(client){
	mytrace('doLoginOK uid:' + client.data.uid);
	application.broadcastMsg("onLogin", client.data);
	// 接受新用户登录
	application.acceptConnection(client);
	// 更新用户昵称映射表

	application.users[client.data.uid] = client;
	
	client.call("onInitRoom", null, client.data.uid == mid, application.getUserList());

}

application.onDisconnect = function(client){
	//rejectConnection引起的disconnect没有data
	if (!client.data) return;

	mytrace('onDisconnect uid:' + client.data.uid);
	if (client.data.uid == mid) { //主播
		var video = this.so.getProperty('video');
		if(video){
			this.so.setProperty('video', null);
		}
	}
	
	delete this.users[client.data.uid];
	
	application.broadcastMsg("onLogout", client.data);
}


Client.prototype.sendMsg = function(msgData){
	mytrace("sendMsg to:" + msgData.to + " msg:" + msgData.msg + " from:" + this.data.uid + " private:" + msgData.private);
	if(msgData.msg.length == 0) return;

	if (this.data.ban) {
		this.call('onChatMsg', 103, 'send msg not allow uid:' + this.data.uid, {});
		return;
	};

	var userInfo = {};

	if (msgData.to != 0) {
		var userInfo = application.getUserInfoByUid(msgData.to);
		if(!userInfo){
			mytrace('sendMsg target uid:' + msgData.to + ' userInfo not found');
			this.call("onChatMsg", null, 100, 'user not in room uid:' + msgData.to, {});
			return;
		}
	};

	if (msgData.to == 0 || !msgData.private) {
		application.broadcastMsg("onChatMsg", 0, '', {"from" : this.data.uid, "fromNickname" : this.data.nickname, "fromHeadPic" : this.data.headPic, "to" : msgData.to, "toNickname" : userInfo.nickname, "toHeadPic" : userInfo.headPic, "msg" : msgData.msg, private : false, "timestamp" : (new Date).getTime()});
		return;
	};

	var ret = {"from" : this.data.uid, "fromNickname" : this.data.nickname, "fromHeadPic" : this.data.headPic, "to" : userInfo.uid, "toNickname" : userInfo.nickname, "toHeadPic" : userInfo.headPic, "msg" : msgData.msg, private : msgData.private, "timestamp" : (new Date).getTime()};

	this.call("onChatMsg", null, 0, '', ret);
	userInfo.client.call('onChatMsg', null, 0, '', ret);
}

Client.prototype.sendGift = function(propId, count, to){
	mytrace('sendGift propId:' + propId + ' count:' + count + ' to:' + to);
	var userInfo = application.getUserInfoByUid(to);
	if(!userInfo){
		mytrace('sendGift target uid:' + to + ' userInfo not found');
		this.call("onGiftMsg", null, 200, 'user not in room uid:' + to, {});
		return;
	}
	var service = application.getService("ChatService", this);
	this.sendGift_Result = function(resp){
		if(resp.errno) {
			this.call("onGiftMsg", null, resp.errno, resp.msg, {});
			return;
		}
		application.broadcastMsg("onGiftMsg", 0, '',  {"from" : this.data.uid, "fromNickname" : this.data.nickname, "fromHeadPic" : this.data.headPic, "to" : to, "toNickname" : userInfo.nickname, "toHeadPic" : userInfo.headPic, "propId": propId, "propName" : resp.data.propName,  "propPic" : resp.data.propPic, "count" : count});
	};
	this.sendGift_Status = function(info) {
		mytrace('sendGitf_Status level:' + info.level + ' description:' + info.description);
	};
	service.sendGift(this.data.sid, this.data.uid, to, propId, count);
}

Client.prototype.ban = function(buid){
	var userInfo = application.getUserInfoByUid(buid);
	if(!userInfo){
		mytrace('sendGift target uid:' + buid + ' userInfo not found');
		this.call("onBanMsg", 300, 'user not in room uid:' + buid, {});
		return;
	}

	userInfo.data.ban = true;

	var conn = NetServices.createGatewayConnection();
	var service = conn.getService("ChatService", this);
	this.ban_Result = function(resp){
		if(resp.errno){
			this.call("onBanMsg", 301, resp.msg, {uid : buid, nickname : userInfo.nickname, headPic : userInfo.headPic});
		}
		else{
			this.call("onBanMsg", '' , {uid : buid, nickname : userInfo.nickname, headPic : userInfo.headPic});
		}
	};
	this.ban_Status = function(info){
		mytrace('ban_Status level' + info.level + ' description:' + info.description);
	};
	service.ban(this.data.sid, buid);
}

application.getUserList = function(){
	var ret = [];
	for(var i = 0; i < application.clients.length; i++){
		var data = application.clients[i].data;
		ret.push(data);
	}
	return ret;
}
